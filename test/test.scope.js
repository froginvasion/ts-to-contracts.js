// Generated by CoffeeScript 1.6.3
(function() {
  var Scope, assert, expect, scope;

  scope = require('../lib/scope');

  Scope = scope.Scope;

  expect = require("chai").expect;

  assert = require("chai").assert;

  beforeEach(function(done) {
    scope.utils.resetRegisteredVariables();
    return done();
  });

  describe("Testing the scope mechanism", function() {
    it("should make a top level scope", function(done) {
      var s;
      s = new Scope(Scope.top_level);
      expect(s.level).to.be.equal(0);
      expect(s.parent).to.be["null"];
      expect(s.frame).to.be.a('array');
      expect(s.registered_frame).to.be.a('object');
      return done();
    });
    it("should enter a new scope", function(done) {
      var s, second;
      s = new Scope(Scope.top_level);
      second = s.enter_scope();
      expect(second.parent).to.be.equal(s);
      expect(second.level).to.be.equal(s.level + 1);
      return done();
    });
    it("should register a new variable in the top scope", function(done) {
      var id, s;
      s = new Scope(Scope.top_level);
      id = {};
      s.register("foo", id);
      expect(s.frame).to.have.length(1);
      expect(s.frame[0]).to.be.equal("foo");
      expect(Scope.getScope(id)).to.be.equal(s);
      expect(s.registered_frame).to.have.a.property("foo");
      return done();
    });
    it("should lookup a registered variable in the same scope", function(done) {
      var id, lookup, s;
      s = new Scope(Scope.top_level);
      id = {};
      s.register("foo", id);
      lookup = s.lookup("foo");
      expect(lookup).to.be.defined;
      expect(lookup).to.be.equal("foo");
      return done();
    });
    it("should lookup a registered variable in a higher scope", function(done) {
      var id, lookup, s, second;
      s = new Scope(Scope.top_level);
      id = {};
      s.register("foo", id);
      second = s.enter_scope();
      lookup = second.lookup("foo");
      expect(lookup).to.be.defined;
      expect(lookup).to.be.equal("foo");
      lookup = s.lookup("foo");
      expect(lookup).to.be.defined;
      expect(lookup).to.be.equal("foo");
      return done();
    });
    return it("should lookup an unregistered variable in own scope and out of scope", function(done) {
      var id, lookup, s, second;
      s = new Scope(Scope.top_level);
      id = {};
      s.register("foo", id);
      lookup = s.lookup("bar");
      expect(lookup).to.be["false"];
      second = s.enter_scope();
      second.register("bar", id);
      lookup = s.lookup("bar");
      expect(lookup).to.be["false"];
      return done();
    });
  });

}).call(this);

/*
//@ sourceMappingURL=test.scope.map
*/
